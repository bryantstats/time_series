---
title: "Time Series Project"
format: 
  html: 
    toc: true
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, eval = TRUE)
```

------------------------------------------------------------------------

This is sample codes for the time series project.  The codes work on the series of monthly Amtrak
ridership between January 1991 and March 2004 in the United States.  The dataset can be download at the link below. 

[Data](Amtrak_data.csv)

------------------------------------------------------------------------

## 1. Data Exploration

-   Import the series. Note: Make sure you specify the correct starting time and frequency for the series.

-   Plot the time series.

```{r}
library(TTR)
library(forecast)
df <- read.csv("Amtrak_data.csv")

# This series start from January 1991 and end in March 2004
y <- ts(df$Ridership, start = c(1991,1), end = c(2004, 3), freq = 12)
plot(y)
```

### 1.1 Smoothing

-   *Moving Average*

```{r}
plot(y)

# create a moving average series
k = 16  # set the moving average 
y_sma = SMA(y, n = k)

# plot the moving average series
lines(y_sma, col = "red")
```

-   *Exponential Smoothing* 

```{r}
plot(y)

# create a moving average series
w = .7

y_ema = EMA(y, ratio = 1-w)

# plot the moving average series
lines(y_ema, col = "red")
```

### 1.2 Auto-correltion

-   ACF

```{r}
acf(y)
```


## 2. Modelling

### 2.1 Model Training

-   Split the original series into the training series and the testing series

-   Train all the models

```{r}
# data partition

# set the proportion of the test set 
p = .2 

nValid <- round(.2*length(y))
nTrain <- length(y) - nValid
train.ts <- window(y, start = c(1991, 1), end = c(1991, nTrain))
valid.ts <- window(y, start = c(1991, nTrain + 1), end = c(1991, nTrain + nValid))

# Modeling
# baseline models

# average method: forecast by the average of the training series
model1 = meanf(train.ts, h = nValid, level = 0)

# naive: forecast by the last observation of the series
model2 = naive(train.ts, h = nValid, level = 0)

# seasonal naive: forecast by the last season
model3 = snaive(train.ts, h = nValid, level = 0)

# drift: drawing the line from the first to the last observation
model4 = rwf(train.ts, h = nValid, level = 0, drift = TRUE)


# Exponential Models
model5 = ses(train.ts, h = nValid, level = 0)
model6 = holt(train.ts, damped = TRUE, h = nValid, level = 0)
model7 = hw(train.ts, seasonal="additive", damped = TRUE, h = nValid, level = 0)
model8 = hw(train.ts, seasonal="multiplicative", damped = TRUE,  h = nValid, level = 0)

# Regression models 
model9 = tslm(train.ts ~ trend, damped = TRUE, h = nValid, level = 0)

model10 = tslm(train.ts ~ trend + season, damped = TRUE, h = nValid, level = 0)

```

### 2.2 Residual Analysis

Report the residuals analysis of all the models.

```{r}
checkresiduals(model1)
checkresiduals(model2)
checkresiduals(model3)
checkresiduals(model4)
checkresiduals(model5)
checkresiduals(model6)
checkresiduals(model7)
checkresiduals(model8)
checkresiduals(model9)
checkresiduals(model10)
```

### 2.3 Testing Accuracy

-   Calculate the forecast of all the models on the validation period. Calculate the Mean absolute percentage error (MAPE) of all the models. Plot the forecast of all models. 

```{r}
# forecasting
forecast1 = forecast(model1, h = nValid, level = 0)
forecast2 = forecast(model2, h = nValid, level = 0)
forecast3 = forecast(model3, h = nValid, level = 0)
forecast4 = forecast(model4, h = nValid, level = 0)
forecast5 = forecast(model5, h = nValid, level = 0)
forecast6 = forecast(model6, h = nValid, level = 0)
forecast7 = forecast(model7, h = nValid, level = 0)
forecast8 = forecast(model8, h = nValid, level = 0)
forecast9 = forecast(model9, h = nValid, level = 0)
forecast10 = forecast(model10, h = nValid, level = 0)

# plotting forecast
plot(forecast1)
lines(valid.ts, col = 'red')
plot(forecast2)
lines(valid.ts, col = 'red')
plot(forecast3)
lines(valid.ts, col = 'red')
plot(forecast4)
lines(valid.ts, col = 'red')
plot(forecast5)
lines(valid.ts, col = 'red')
plot(forecast6)
lines(valid.ts, col = 'red')
plot(forecast7)
lines(valid.ts, col = 'red')
plot(forecast8)
lines(valid.ts, col = 'red')
plot(forecast9)
lines(valid.ts, col = 'red')
plot(forecast10)
lines(valid.ts, col = 'red')

# accuracy
a1 = accuracy(forecast1$mean, valid.ts)
a2 = accuracy(forecast2$mean, valid.ts)
a3 = accuracy(forecast3$mean, valid.ts)
a4 = accuracy(forecast4$mean, valid.ts)
a5 = accuracy(forecast5$mean, valid.ts)
a6 = accuracy(forecast6$mean, valid.ts)
a7 = accuracy(forecast7$mean, valid.ts)
a8 = accuracy(forecast8$mean, valid.ts)
a9 = accuracy(forecast9$mean, valid.ts)
a10 = accuracy(forecast10$mean, valid.ts)

rbind(a1, a2, a3,a4, a5, a6, a7, a8, a9, a10)
```

## 3. Forecasting

Based on the model evaluation above, decide the best model. Retrain the best model on the entire series. Use the retrained model to forecast the next values. Plot the series and the forecast values.


```{r}
# model7 gives the lowest MAPE, 
# so we will select this model as the final model 
# to train it on the entire dataset to make forecasting.

selected_model =  hw(y, seasonal="additive", damped = TRUE, h = nValid)
new_forecast = forecast(selected_model)
plot(new_forecast)
```

------------------------------------------------------------------------